{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "from time import time\n",
    "import itertools\n",
    "from matplotlib.ticker import NullFormatter\n",
    "import scipy.stats as stats\n",
    "from scipy.spatial.distance import pdist, squareform, cdist\n",
    "from sklearn.cluster import KMeans, AgglomerativeClustering\n",
    "from sklearn.metrics import silhouette_score, silhouette_samples\n",
    "from sklearn.manifold import TSNE\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler, RobustScaler, OneHotEncoder\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.pipeline import Pipeline\n",
    "import matplotlib.cm as cm\n",
    "import seaborn as sn\n",
    "\n",
    "from sportsreference.nba.boxscore import Boxscore\n",
    "from sportsreference.nba.roster import Roster, Player\n",
    "from sportsreference.nba.schedule import Schedule\n",
    "from sportsreference.nba.teams import Teams\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('fivethirtyeight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/luke/opt/anaconda3/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3146: DtypeWarning: Columns (102) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n"
     ]
    }
   ],
   "source": [
    "df_season = pd.read_csv('data/2nba_player_stats_by_season.csv')\n",
    "df_career = pd.read_csv('data/2nba_player_stats_by_career.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>and_ones</th>\n",
       "      <th>assist_percentage</th>\n",
       "      <th>assists</th>\n",
       "      <th>block_percentage</th>\n",
       "      <th>blocking_fouls</th>\n",
       "      <th>blocks</th>\n",
       "      <th>box_plus_minus</th>\n",
       "      <th>center_percentage</th>\n",
       "      <th>defensive_box_plus_minus</th>\n",
       "      <th>...</th>\n",
       "      <th>age</th>\n",
       "      <th>avg_salary</th>\n",
       "      <th>years_played</th>\n",
       "      <th>year_list</th>\n",
       "      <th>current_player</th>\n",
       "      <th>contract_total</th>\n",
       "      <th>contract_length</th>\n",
       "      <th>current_salary</th>\n",
       "      <th>current_avg_salary</th>\n",
       "      <th>current_team</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bareajo01 Career</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33.2</td>\n",
       "      <td>3270.0</td>\n",
       "      <td>0.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.0</td>\n",
       "      <td>-0.7</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.795708e+06</td>\n",
       "      <td>14</td>\n",
       "      <td>['2006-07', '2007-08', '2008-09', '2009-10', '...</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>broekry01 Career</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.5</td>\n",
       "      <td>33.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.127658e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>['2018-19', '2019-20']</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>brunsja01 Career</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.2</td>\n",
       "      <td>555.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.822840e+05</td>\n",
       "      <td>3</td>\n",
       "      <td>['2018-19', '2019-20', '2020-21']</td>\n",
       "      <td>True</td>\n",
       "      <td>3465918.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1663861.0</td>\n",
       "      <td>1732959.0</td>\n",
       "      <td>DAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>burketr01 Career</td>\n",
       "      <td>NaN</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1447.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.0</td>\n",
       "      <td>-1.1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.983643e+06</td>\n",
       "      <td>8</td>\n",
       "      <td>['2013-14', '2014-15', '2015-16', '2016-17', '...</td>\n",
       "      <td>True</td>\n",
       "      <td>9999999.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3174603.0</td>\n",
       "      <td>3333333.0</td>\n",
       "      <td>DAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>caulewi01 Career</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.1</td>\n",
       "      <td>579.0</td>\n",
       "      <td>3.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>317.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.921326e+06</td>\n",
       "      <td>6</td>\n",
       "      <td>['2015-16', '2016-17', '2017-18', '2018-19', '...</td>\n",
       "      <td>True</td>\n",
       "      <td>8200000.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4000000.0</td>\n",
       "      <td>4100000.0</td>\n",
       "      <td>DAL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 103 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id  and_ones  assist_percentage  assists  block_percentage  \\\n",
       "0  bareajo01 Career       NaN               33.2   3270.0               0.1   \n",
       "1  broekry01 Career       NaN                7.5     33.0               1.1   \n",
       "2  brunsja01 Career       NaN               23.2    555.0               0.2   \n",
       "3  burketr01 Career       NaN               25.0   1447.0               0.4   \n",
       "4  caulewi01 Career       NaN               10.1    579.0               3.2   \n",
       "\n",
       "   blocking_fouls  blocks  box_plus_minus  center_percentage  \\\n",
       "0             NaN    24.0            -0.7                  0   \n",
       "1             NaN     8.0            -0.5                  0   \n",
       "2             NaN     8.0            -1.0                  0   \n",
       "3             NaN    48.0            -1.1                  0   \n",
       "4             NaN   317.0             0.0                  0   \n",
       "\n",
       "   defensive_box_plus_minus  ...  age    avg_salary  years_played  \\\n",
       "0                      -1.4  ...  NaN  2.795708e+06            14   \n",
       "1                      -0.3  ...  NaN  1.127658e+06             2   \n",
       "2                      -0.8  ...  NaN  8.822840e+05             3   \n",
       "3                      -1.6  ...  NaN  1.983643e+06             8   \n",
       "4                       0.6  ...  NaN  2.921326e+06             6   \n",
       "\n",
       "                                           year_list  current_player  \\\n",
       "0  ['2006-07', '2007-08', '2008-09', '2009-10', '...           False   \n",
       "1                             ['2018-19', '2019-20']           False   \n",
       "2                  ['2018-19', '2019-20', '2020-21']            True   \n",
       "3  ['2013-14', '2014-15', '2015-16', '2016-17', '...            True   \n",
       "4  ['2015-16', '2016-17', '2017-18', '2018-19', '...            True   \n",
       "\n",
       "   contract_total  contract_length  current_salary  current_avg_salary  \\\n",
       "0             NaN              NaN             NaN                 NaN   \n",
       "1             NaN              NaN             NaN                 NaN   \n",
       "2       3465918.0              2.0       1663861.0           1732959.0   \n",
       "3       9999999.0              3.0       3174603.0           3333333.0   \n",
       "4       8200000.0              2.0       4000000.0           4100000.0   \n",
       "\n",
       "   current_team  \n",
       "0           NaN  \n",
       "1           NaN  \n",
       "2           DAL  \n",
       "3           DAL  \n",
       "4           DAL  \n",
       "\n",
       "[5 rows x 103 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_career.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dropping columns with all null or useless values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "and_ones: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "blocking_fouls: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "center_percentage: has 1 values\n",
      "Values include:\n",
      "     [0]\n",
      "dunks: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "half_court_heaves_made: has 7 values\n",
      "Values include:\n",
      "     [0. 1. 2. 3. 6. 4. 5.]\n",
      "lost_ball_turnovers: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "net_plus_minus: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "offensive_fouls: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "on_court_plus_minus: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "other_turnovers: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "passing_turnovers: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "percentage_field_goals_as_dunks: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "percentage_of_three_pointers_from_corner: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "percentage_shots_three_pointers: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "percentage_shots_two_pointers: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "point_guard_percentage: has 1 values\n",
      "Values include:\n",
      "     [0]\n",
      "points_generated_by_assists: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "position: has 11 values\n",
      "Values include:\n",
      "     ['PG' 'SF' 'C' 'SG' 'PF' 'C,PF' nan 'C,SF' 'PF,SF' 'PG,SG' 'SF,SG']\n",
      "power_forward_percentage: has 1 values\n",
      "Values include:\n",
      "     [0]\n",
      "shooting_fouls: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "shooting_fouls_drawn: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "shooting_guard_percentage: has 1 values\n",
      "Values include:\n",
      "     [0]\n",
      "shots_blocked: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "small_forward_percentage: has 1 values\n",
      "Values include:\n",
      "     [0]\n",
      "take_fouls: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "team_abbreviation: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "three_point_shot_percentage_from_corner: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "three_pointers_assisted_percentage: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "two_pointers_assisted_percentage: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "year: has 1 values\n",
      "Values include:\n",
      "     ['Career']\n",
      "age: has 1 values\n",
      "Values include:\n",
      "     [nan]\n",
      "current_player: has 2 values\n",
      "Values include:\n",
      "     [False  True]\n",
      "contract_length: has 7 values\n",
      "Values include:\n",
      "     [nan  2.  3.  1.  4.  6.  5.]\n",
      "Drop List: []\n"
     ]
    }
   ],
   "source": [
    "for col in df_career.columns:\n",
    "    unique = df_career[col].unique()\n",
    "    val = len(unique)\n",
    "    drop_lst = []\n",
    "    if val < 20:\n",
    "        drop_lst.append(str(col))\n",
    "        print(f'{col}: has {val} values')\n",
    "        print(f'Values include:')\n",
    "        print(f'     {unique}')\n",
    "\n",
    "print(f'Drop List: {drop_lst}')\n",
    "# df_career['center_percentage'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "nulls = ['and_ones', 'blocking_fouls', 'dunks', 'lost_ball_turnovers',\n",
    "'net_plus_minus', 'offensive_fouls', 'on_court_plus_minus',\n",
    "'other_turnovers', 'passing_turnovers', 'percentage_field_goals_as_dunks',\n",
    "'percentage_of_three_pointers_from_corner', 'percentage_shots_three_pointers',\n",
    "'percentage_shots_two_pointers', 'points_generated_by_assists',\n",
    "'shooting_fouls', 'shooting_fouls_drawn', 'shots_blocked',\n",
    "'take_fouls', 'team_abbreviation', 'three_point_shot_percentage_from_corner',\n",
    "'three_pointers_assisted_percentage', 'two_pointers_assisted_percentage',\n",
    "'age', 'center_percentage', 'point_guard_percentage',\n",
    "'power_forward_percentage', 'shooting_guard_percentage',\n",
    "'small_forward_percentage', 'year', 'player_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_career = df_career.drop(['and_ones', 'blocking_fouls', 'dunks', 'lost_ball_turnovers',\n",
    "'net_plus_minus', 'offensive_fouls', 'on_court_plus_minus',\n",
    "'other_turnovers', 'passing_turnovers', 'percentage_field_goals_as_dunks',\n",
    "'percentage_of_three_pointers_from_corner', 'percentage_shots_three_pointers',\n",
    "'percentage_shots_two_pointers', 'points_generated_by_assists',\n",
    "'shooting_fouls', 'shooting_fouls_drawn', 'shots_blocked',\n",
    "'take_fouls', 'team_abbreviation', 'three_point_shot_percentage_from_corner',\n",
    "'three_pointers_assisted_percentage', 'two_pointers_assisted_percentage',\n",
    "'age', 'center_percentage', 'point_guard_percentage',\n",
    "'power_forward_percentage', 'shooting_guard_percentage',\n",
    "'small_forward_percentage', 'year', 'player_id'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dropping Rows(players)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Also going to drop players that don't have any recorded salary\n",
    "df_career = df_career.dropna(subset=['salary'])\n",
    "# And players whos salary appeared as $0.0 for some reason\n",
    "df_career = df_career[df_career['salary'] > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name\n",
       "Dee Brown            2\n",
       "Marcus Williams      2\n",
       "Chris Johnson        2\n",
       "Mike James           2\n",
       "Fred Vinson          1\n",
       "                    ..\n",
       "Michael Dickerson    1\n",
       "Michael Doleac       1\n",
       "Michael Finley       1\n",
       "Michael Frazier      1\n",
       "A.C. Green           1\n",
       "Name: name, Length: 1919, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Double-checking that the double_names are actually unique players (Spoiler Alert: they are)\n",
    "#double_names = ['Dee Brown', 'Marcus Williams', 'Chris Johnson', 'Mike James']\n",
    "#df_career[df_career['name'].isin(double_names)]\n",
    "name_counts = df_career.groupby('name')['name'].count()\n",
    "name_counts.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting index to the Players name & modifying the ID's so that they don't have 'Career appended for some reason'\n",
    "df_career['id'] = df_career['id'].str.split(' ').str[0]\n",
    "df_career = df_career.set_index('name')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def to_inches(height):\n",
    "    feet, inches = str(height).split('-')\n",
    "    return (int(feet)*12) + int(inches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_career['height'] = df_career['height'].apply(to_inches)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name\n",
       "J.J. Barea             70\n",
       "Ryan Broekhoff         78\n",
       "Jalen Brunson          73\n",
       "Trey Burke             72\n",
       "Willie Cauley-Stein    84\n",
       "                       ..\n",
       "Eric Murdock           73\n",
       "Chris Anstey           84\n",
       "B.J. Armstrong         74\n",
       "Khalid Reeves          75\n",
       "Dedric Willoughby      75\n",
       "Name: height, Length: 1923, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_career['height']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['bareajo01', 'broekry01', 'brunsja01', ..., 'armstbj01',\n",
       "       'reevekh01', 'willode01'], dtype=object)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_ids = df_career['id'].values\n",
    "player_ids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['J.J. Barea', 'Ryan Broekhoff', 'Jalen Brunson', ...,\n",
       "       'B.J. Armstrong', 'Khalid Reeves', 'Dedric Willoughby'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_names = df_career.index.values\n",
    "player_names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filling NaNs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grabbing players that are not currently assigned positions\n",
    "unpositioned_players = df_career[df_career['position'].isna()]\n",
    "#unpositioned_players"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filling nan for position with 'na' & then the rest of the categories with 0's\n",
    "# because they're only nan's since they haven't attempted\n",
    "df_career['position'] = df_career['position'].fillna('na')\n",
    "df_career = df_career.interpolate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Creating current/past players DF's & then dropping the columns that only pertain to current players from career_df\n",
    "df_past_players = df_career[df_career['current_player'] == False]\n",
    "#df_past_players\n",
    "df_current_players = df_career[df_career['current_player'] == True]\n",
    "#df_current_players\n",
    "current_player_features = ['contract_total', 'contract_length', 'current_salary', 'current_avg_salary', 'current_team']\n",
    "df_career = df_career.drop(current_player_features, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating seperate DFs for different use cases\n",
    "df_career_no_salaries = df_career.drop(['salary'], axis=1)\n",
    "\n",
    "non_stats = ['nationality', 'position', 'birth_date', 'year_list', 'id']\n",
    "\n",
    "df_pure_stats = df_career.drop(non_stats, axis=1)\n",
    "df_pure_stats_no_salary = df_pure_stats.drop(['salary'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pure_stats['current_player'] = df_pure_stats['current_player'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Creating DF that only contains stats that are already averaged\n",
    "\n",
    "avgs = ['assist_percentage', 'avg_salary', 'block_percentage', 'box_plus_minus',\n",
    "'defensive_box_plus_minus', 'defensive_rebound_percentage', 'effective_field_goal_percentage',\n",
    "'field_goal_percentage', 'field_goal_perc_sixteen_foot_plus_two_pointers',\n",
    "'field_goal_perc_ten_to_sixteen_feet', 'field_goal_perc_three_to_ten_feet',\n",
    "'field_goal_perc_zero_to_three_feet', 'field_goal_percentage',\n",
    "'free_throw_attempt_rate', 'free_throw_percentage', 'offensive_box_plus_minus',\n",
    "'offensive_rebound_percentage', 'player_efficiency_rating',\n",
    "'three_point_percentage', 'total_rebound_percentage', 'true_shooting_percentage',\n",
    "'turnover_percentage', 'two_point_percentage', 'usage_percentage',\n",
    "'win_shares', 'win_shares_per_48_minutes', 'years_played']\n",
    "\n",
    "df_avgs = df_pure_stats[['assist_percentage', 'avg_salary', 'block_percentage', 'box_plus_minus',\n",
    "'defensive_box_plus_minus', 'defensive_rebound_percentage', 'effective_field_goal_percentage',\n",
    "'field_goal_percentage', 'field_goal_perc_sixteen_foot_plus_two_pointers',\n",
    "'field_goal_perc_ten_to_sixteen_feet', 'field_goal_perc_three_to_ten_feet',\n",
    "'field_goal_perc_zero_to_three_feet', 'field_goal_percentage',\n",
    "'free_throw_attempt_rate', 'free_throw_percentage', 'offensive_box_plus_minus',\n",
    "'offensive_rebound_percentage', 'player_efficiency_rating',\n",
    "'three_point_percentage', 'total_rebound_percentage', 'true_shooting_percentage',\n",
    "'turnover_percentage', 'two_point_percentage', 'usage_percentage',\n",
    "'win_shares', 'win_shares_per_48_minutes', 'years_played']]\n",
    "#df_avgs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_totals = df_pure_stats.drop(avgs, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sanity check before modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['assist_percentage', 'assists', 'block_percentage', 'blocks',\n",
       "       'box_plus_minus', 'defensive_box_plus_minus',\n",
       "       'defensive_rebound_percentage', 'defensive_rebounds',\n",
       "       'defensive_win_shares', 'effective_field_goal_percentage',\n",
       "       'field_goal_attempts', 'field_goal_perc_sixteen_foot_plus_two_pointers',\n",
       "       'field_goal_perc_ten_to_sixteen_feet',\n",
       "       'field_goal_perc_three_to_ten_feet',\n",
       "       'field_goal_perc_zero_to_three_feet', 'field_goal_percentage',\n",
       "       'field_goals', 'free_throw_attempt_rate', 'free_throw_attempts',\n",
       "       'free_throw_percentage', 'free_throws', 'games_played', 'games_started',\n",
       "       'half_court_heaves', 'half_court_heaves_made', 'height',\n",
       "       'minutes_played', 'offensive_box_plus_minus',\n",
       "       'offensive_rebound_percentage', 'offensive_rebounds',\n",
       "       'offensive_win_shares', 'percentage_sixteen_foot_plus_two_pointers',\n",
       "       'percentage_ten_to_sixteen_footers', 'percentage_three_to_ten_footers',\n",
       "       'percentage_zero_to_three_footers', 'personal_fouls',\n",
       "       'player_efficiency_rating', 'points', 'salary', 'shooting_distance',\n",
       "       'steal_percentage', 'steals', 'three_point_attempt_rate',\n",
       "       'three_point_attempts', 'three_point_percentage', 'three_pointers',\n",
       "       'total_rebound_percentage', 'total_rebounds',\n",
       "       'true_shooting_percentage', 'turnover_percentage', 'turnovers',\n",
       "       'two_point_attempts', 'two_point_percentage', 'two_pointers',\n",
       "       'usage_percentage', 'value_over_replacement_player', 'weight',\n",
       "       'win_shares', 'win_shares_per_48_minutes', 'avg_salary', 'years_played',\n",
       "       'current_player'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pure_stats.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>assists</th>\n",
       "      <th>blocks</th>\n",
       "      <th>defensive_rebounds</th>\n",
       "      <th>defensive_win_shares</th>\n",
       "      <th>field_goal_attempts</th>\n",
       "      <th>field_goals</th>\n",
       "      <th>free_throw_attempts</th>\n",
       "      <th>free_throws</th>\n",
       "      <th>games_played</th>\n",
       "      <th>games_started</th>\n",
       "      <th>...</th>\n",
       "      <th>three_point_attempt_rate</th>\n",
       "      <th>three_point_attempts</th>\n",
       "      <th>three_pointers</th>\n",
       "      <th>total_rebounds</th>\n",
       "      <th>turnovers</th>\n",
       "      <th>two_point_attempts</th>\n",
       "      <th>two_pointers</th>\n",
       "      <th>value_over_replacement_player</th>\n",
       "      <th>weight</th>\n",
       "      <th>current_player</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>J.J. Barea</th>\n",
       "      <td>3270.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1495.0</td>\n",
       "      <td>10.1</td>\n",
       "      <td>6685.0</td>\n",
       "      <td>2832.0</td>\n",
       "      <td>1174.0</td>\n",
       "      <td>932.0</td>\n",
       "      <td>831.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.349</td>\n",
       "      <td>2330.0</td>\n",
       "      <td>819.0</td>\n",
       "      <td>1748.0</td>\n",
       "      <td>1264.0</td>\n",
       "      <td>4355.0</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ryan Broekhoff</th>\n",
       "      <td>33.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>185.0</td>\n",
       "      <td>79.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.778</td>\n",
       "      <td>144.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>106.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0.2</td>\n",
       "      <td>215</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jalen Brunson</th>\n",
       "      <td>555.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>386.0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1314.0</td>\n",
       "      <td>636.0</td>\n",
       "      <td>297.0</td>\n",
       "      <td>229.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.324</td>\n",
       "      <td>426.0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>446.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>888.0</td>\n",
       "      <td>481.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>190</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Trey Burke</th>\n",
       "      <td>1447.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>678.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>4181.0</td>\n",
       "      <td>1724.0</td>\n",
       "      <td>617.0</td>\n",
       "      <td>496.0</td>\n",
       "      <td>438.0</td>\n",
       "      <td>129.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.362</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>526.0</td>\n",
       "      <td>833.0</td>\n",
       "      <td>520.0</td>\n",
       "      <td>2667.0</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>185</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willie Cauley-Stein</th>\n",
       "      <td>579.0</td>\n",
       "      <td>317.0</td>\n",
       "      <td>1689.0</td>\n",
       "      <td>10.1</td>\n",
       "      <td>2763.0</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>893.0</td>\n",
       "      <td>548.0</td>\n",
       "      <td>384.0</td>\n",
       "      <td>249.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010</td>\n",
       "      <td>27.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2344.0</td>\n",
       "      <td>364.0</td>\n",
       "      <td>2736.0</td>\n",
       "      <td>1495.0</td>\n",
       "      <td>4.4</td>\n",
       "      <td>240</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     assists  blocks  defensive_rebounds  \\\n",
       "name                                                       \n",
       "J.J. Barea            3270.0    24.0              1495.0   \n",
       "Ryan Broekhoff          33.0     8.0                93.0   \n",
       "Jalen Brunson          555.0     8.0               386.0   \n",
       "Trey Burke            1447.0    48.0               678.0   \n",
       "Willie Cauley-Stein    579.0   317.0              1689.0   \n",
       "\n",
       "                     defensive_win_shares  field_goal_attempts  field_goals  \\\n",
       "name                                                                          \n",
       "J.J. Barea                           10.1               6685.0       2832.0   \n",
       "Ryan Broekhoff                        0.5                185.0         79.0   \n",
       "Jalen Brunson                         2.2               1314.0        636.0   \n",
       "Trey Burke                            4.6               4181.0       1724.0   \n",
       "Willie Cauley-Stein                  10.1               2763.0       1500.0   \n",
       "\n",
       "                     free_throw_attempts  free_throws  games_played  \\\n",
       "name                                                                  \n",
       "J.J. Barea                        1174.0        932.0         831.0   \n",
       "Ryan Broekhoff                      27.0         22.0          59.0   \n",
       "Jalen Brunson                      297.0        229.0         171.0   \n",
       "Trey Burke                         617.0        496.0         438.0   \n",
       "Willie Cauley-Stein                893.0        548.0         384.0   \n",
       "\n",
       "                     games_started  ...  three_point_attempt_rate  \\\n",
       "name                                ...                             \n",
       "J.J. Barea                   107.0  ...                     0.349   \n",
       "Ryan Broekhoff                 1.0  ...                     0.778   \n",
       "Jalen Brunson                 64.0  ...                     0.324   \n",
       "Trey Burke                   129.0  ...                     0.362   \n",
       "Willie Cauley-Stein          249.0  ...                     0.010   \n",
       "\n",
       "                     three_point_attempts  three_pointers  total_rebounds  \\\n",
       "name                                                                        \n",
       "J.J. Barea                         2330.0           819.0          1748.0   \n",
       "Ryan Broekhoff                      144.0            58.0           106.0   \n",
       "Jalen Brunson                       426.0           155.0           446.0   \n",
       "Trey Burke                         1514.0           526.0           833.0   \n",
       "Willie Cauley-Stein                  27.0             5.0          2344.0   \n",
       "\n",
       "                     turnovers  two_point_attempts  two_pointers  \\\n",
       "name                                                               \n",
       "J.J. Barea              1264.0              4355.0        2013.0   \n",
       "Ryan Broekhoff            22.0                41.0          21.0   \n",
       "Jalen Brunson            210.0               888.0         481.0   \n",
       "Trey Burke               520.0              2667.0        1198.0   \n",
       "Willie Cauley-Stein      364.0              2736.0        1495.0   \n",
       "\n",
       "                     value_over_replacement_player  weight  current_player  \n",
       "name                                                                        \n",
       "J.J. Barea                                     5.3     180               0  \n",
       "Ryan Broekhoff                                 0.2     215               0  \n",
       "Jalen Brunson                                  0.9     190               1  \n",
       "Trey Burke                                     2.1     185               1  \n",
       "Willie Cauley-Stein                            4.4     240               1  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_totals.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>assist_percentage</th>\n",
       "      <th>avg_salary</th>\n",
       "      <th>block_percentage</th>\n",
       "      <th>box_plus_minus</th>\n",
       "      <th>defensive_box_plus_minus</th>\n",
       "      <th>defensive_rebound_percentage</th>\n",
       "      <th>effective_field_goal_percentage</th>\n",
       "      <th>field_goal_percentage</th>\n",
       "      <th>field_goal_perc_sixteen_foot_plus_two_pointers</th>\n",
       "      <th>field_goal_perc_ten_to_sixteen_feet</th>\n",
       "      <th>...</th>\n",
       "      <th>player_efficiency_rating</th>\n",
       "      <th>three_point_percentage</th>\n",
       "      <th>total_rebound_percentage</th>\n",
       "      <th>true_shooting_percentage</th>\n",
       "      <th>turnover_percentage</th>\n",
       "      <th>two_point_percentage</th>\n",
       "      <th>usage_percentage</th>\n",
       "      <th>win_shares</th>\n",
       "      <th>win_shares_per_48_minutes</th>\n",
       "      <th>years_played</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>J.J. Barea</th>\n",
       "      <td>33.2</td>\n",
       "      <td>2.795708e+06</td>\n",
       "      <td>0.1</td>\n",
       "      <td>-0.7</td>\n",
       "      <td>-1.4</td>\n",
       "      <td>10.4</td>\n",
       "      <td>0.485</td>\n",
       "      <td>0.424</td>\n",
       "      <td>0.398</td>\n",
       "      <td>0.417</td>\n",
       "      <td>...</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.352</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.515</td>\n",
       "      <td>14.9</td>\n",
       "      <td>0.462</td>\n",
       "      <td>23.4</td>\n",
       "      <td>23.8</td>\n",
       "      <td>0.070</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ryan Broekhoff</th>\n",
       "      <td>7.5</td>\n",
       "      <td>1.127658e+06</td>\n",
       "      <td>1.1</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>-0.3</td>\n",
       "      <td>15.5</td>\n",
       "      <td>0.584</td>\n",
       "      <td>0.427</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.143</td>\n",
       "      <td>...</td>\n",
       "      <td>11.4</td>\n",
       "      <td>0.403</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0.604</td>\n",
       "      <td>10.1</td>\n",
       "      <td>0.512</td>\n",
       "      <td>14.8</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.093</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jalen Brunson</th>\n",
       "      <td>23.2</td>\n",
       "      <td>8.822840e+05</td>\n",
       "      <td>0.2</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>11.2</td>\n",
       "      <td>0.543</td>\n",
       "      <td>0.484</td>\n",
       "      <td>0.443</td>\n",
       "      <td>0.495</td>\n",
       "      <td>...</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.364</td>\n",
       "      <td>6.6</td>\n",
       "      <td>0.573</td>\n",
       "      <td>12.7</td>\n",
       "      <td>0.542</td>\n",
       "      <td>19.7</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.099</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Trey Burke</th>\n",
       "      <td>25.0</td>\n",
       "      <td>1.983643e+06</td>\n",
       "      <td>0.4</td>\n",
       "      <td>-1.1</td>\n",
       "      <td>-1.6</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.475</td>\n",
       "      <td>0.412</td>\n",
       "      <td>0.435</td>\n",
       "      <td>0.429</td>\n",
       "      <td>...</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.347</td>\n",
       "      <td>4.9</td>\n",
       "      <td>0.502</td>\n",
       "      <td>10.5</td>\n",
       "      <td>0.449</td>\n",
       "      <td>23.0</td>\n",
       "      <td>12.7</td>\n",
       "      <td>0.063</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Willie Cauley-Stein</th>\n",
       "      <td>10.1</td>\n",
       "      <td>2.921326e+06</td>\n",
       "      <td>3.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>21.3</td>\n",
       "      <td>0.544</td>\n",
       "      <td>0.543</td>\n",
       "      <td>0.368</td>\n",
       "      <td>0.336</td>\n",
       "      <td>...</td>\n",
       "      <td>16.8</td>\n",
       "      <td>0.185</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.563</td>\n",
       "      <td>10.3</td>\n",
       "      <td>0.546</td>\n",
       "      <td>17.4</td>\n",
       "      <td>22.2</td>\n",
       "      <td>0.121</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Eric Murdock</th>\n",
       "      <td>34.3</td>\n",
       "      <td>1.114725e+06</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.9</td>\n",
       "      <td>9.2</td>\n",
       "      <td>0.473</td>\n",
       "      <td>0.438</td>\n",
       "      <td>0.373</td>\n",
       "      <td>0.405</td>\n",
       "      <td>...</td>\n",
       "      <td>17.4</td>\n",
       "      <td>0.343</td>\n",
       "      <td>6.2</td>\n",
       "      <td>0.523</td>\n",
       "      <td>16.8</td>\n",
       "      <td>0.462</td>\n",
       "      <td>21.9</td>\n",
       "      <td>25.6</td>\n",
       "      <td>0.103</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chris Anstey</th>\n",
       "      <td>11.0</td>\n",
       "      <td>9.376067e+05</td>\n",
       "      <td>2.2</td>\n",
       "      <td>-2.9</td>\n",
       "      <td>0.2</td>\n",
       "      <td>19.2</td>\n",
       "      <td>0.416</td>\n",
       "      <td>0.413</td>\n",
       "      <td>0.363</td>\n",
       "      <td>0.250</td>\n",
       "      <td>...</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.138</td>\n",
       "      <td>14.2</td>\n",
       "      <td>0.477</td>\n",
       "      <td>14.7</td>\n",
       "      <td>0.424</td>\n",
       "      <td>21.2</td>\n",
       "      <td>2.8</td>\n",
       "      <td>0.062</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B.J. Armstrong</th>\n",
       "      <td>20.9</td>\n",
       "      <td>1.489091e+06</td>\n",
       "      <td>0.2</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>-0.6</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0.513</td>\n",
       "      <td>0.477</td>\n",
       "      <td>0.495</td>\n",
       "      <td>0.373</td>\n",
       "      <td>...</td>\n",
       "      <td>14.5</td>\n",
       "      <td>0.425</td>\n",
       "      <td>4.3</td>\n",
       "      <td>0.555</td>\n",
       "      <td>11.9</td>\n",
       "      <td>0.487</td>\n",
       "      <td>18.4</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.121</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Khalid Reeves</th>\n",
       "      <td>24.3</td>\n",
       "      <td>1.502218e+06</td>\n",
       "      <td>0.4</td>\n",
       "      <td>-1.3</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>8.3</td>\n",
       "      <td>0.482</td>\n",
       "      <td>0.416</td>\n",
       "      <td>0.378</td>\n",
       "      <td>0.316</td>\n",
       "      <td>...</td>\n",
       "      <td>13.1</td>\n",
       "      <td>0.363</td>\n",
       "      <td>5.7</td>\n",
       "      <td>0.528</td>\n",
       "      <td>17.9</td>\n",
       "      <td>0.446</td>\n",
       "      <td>19.1</td>\n",
       "      <td>8.4</td>\n",
       "      <td>0.069</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dedric Willoughby</th>\n",
       "      <td>24.6</td>\n",
       "      <td>1.349560e+05</td>\n",
       "      <td>0.3</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>-0.4</td>\n",
       "      <td>9.4</td>\n",
       "      <td>0.422</td>\n",
       "      <td>0.341</td>\n",
       "      <td>0.447</td>\n",
       "      <td>0.300</td>\n",
       "      <td>...</td>\n",
       "      <td>12.2</td>\n",
       "      <td>0.296</td>\n",
       "      <td>5.9</td>\n",
       "      <td>0.472</td>\n",
       "      <td>15.5</td>\n",
       "      <td>0.395</td>\n",
       "      <td>21.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.040</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1923 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     assist_percentage    avg_salary  block_percentage  \\\n",
       "name                                                                     \n",
       "J.J. Barea                        33.2  2.795708e+06               0.1   \n",
       "Ryan Broekhoff                     7.5  1.127658e+06               1.1   \n",
       "Jalen Brunson                     23.2  8.822840e+05               0.2   \n",
       "Trey Burke                        25.0  1.983643e+06               0.4   \n",
       "Willie Cauley-Stein               10.1  2.921326e+06               3.2   \n",
       "...                                ...           ...               ...   \n",
       "Eric Murdock                      34.3  1.114725e+06               0.4   \n",
       "Chris Anstey                      11.0  9.376067e+05               2.2   \n",
       "B.J. Armstrong                    20.9  1.489091e+06               0.2   \n",
       "Khalid Reeves                     24.3  1.502218e+06               0.4   \n",
       "Dedric Willoughby                 24.6  1.349560e+05               0.3   \n",
       "\n",
       "                     box_plus_minus  defensive_box_plus_minus  \\\n",
       "name                                                            \n",
       "J.J. Barea                     -0.7                      -1.4   \n",
       "Ryan Broekhoff                 -0.5                      -0.3   \n",
       "Jalen Brunson                  -1.0                      -0.8   \n",
       "Trey Burke                     -1.1                      -1.6   \n",
       "Willie Cauley-Stein             0.0                       0.6   \n",
       "...                             ...                       ...   \n",
       "Eric Murdock                    2.0                       0.9   \n",
       "Chris Anstey                   -2.9                       0.2   \n",
       "B.J. Armstrong                 -0.2                      -0.6   \n",
       "Khalid Reeves                  -1.3                      -0.5   \n",
       "Dedric Willoughby              -1.0                      -0.4   \n",
       "\n",
       "                     defensive_rebound_percentage  \\\n",
       "name                                                \n",
       "J.J. Barea                                   10.4   \n",
       "Ryan Broekhoff                               15.5   \n",
       "Jalen Brunson                                11.2   \n",
       "Trey Burke                                    8.0   \n",
       "Willie Cauley-Stein                          21.3   \n",
       "...                                           ...   \n",
       "Eric Murdock                                  9.2   \n",
       "Chris Anstey                                 19.2   \n",
       "B.J. Armstrong                                7.4   \n",
       "Khalid Reeves                                 8.3   \n",
       "Dedric Willoughby                             9.4   \n",
       "\n",
       "                     effective_field_goal_percentage  field_goal_percentage  \\\n",
       "name                                                                          \n",
       "J.J. Barea                                     0.485                  0.424   \n",
       "Ryan Broekhoff                                 0.584                  0.427   \n",
       "Jalen Brunson                                  0.543                  0.484   \n",
       "Trey Burke                                     0.475                  0.412   \n",
       "Willie Cauley-Stein                            0.544                  0.543   \n",
       "...                                              ...                    ...   \n",
       "Eric Murdock                                   0.473                  0.438   \n",
       "Chris Anstey                                   0.416                  0.413   \n",
       "B.J. Armstrong                                 0.513                  0.477   \n",
       "Khalid Reeves                                  0.482                  0.416   \n",
       "Dedric Willoughby                              0.422                  0.341   \n",
       "\n",
       "                     field_goal_perc_sixteen_foot_plus_two_pointers  \\\n",
       "name                                                                  \n",
       "J.J. Barea                                                    0.398   \n",
       "Ryan Broekhoff                                                1.000   \n",
       "Jalen Brunson                                                 0.443   \n",
       "Trey Burke                                                    0.435   \n",
       "Willie Cauley-Stein                                           0.368   \n",
       "...                                                             ...   \n",
       "Eric Murdock                                                  0.373   \n",
       "Chris Anstey                                                  0.363   \n",
       "B.J. Armstrong                                                0.495   \n",
       "Khalid Reeves                                                 0.378   \n",
       "Dedric Willoughby                                             0.447   \n",
       "\n",
       "                     field_goal_perc_ten_to_sixteen_feet  ...  \\\n",
       "name                                                      ...   \n",
       "J.J. Barea                                         0.417  ...   \n",
       "Ryan Broekhoff                                     0.143  ...   \n",
       "Jalen Brunson                                      0.495  ...   \n",
       "Trey Burke                                         0.429  ...   \n",
       "Willie Cauley-Stein                                0.336  ...   \n",
       "...                                                  ...  ...   \n",
       "Eric Murdock                                       0.405  ...   \n",
       "Chris Anstey                                       0.250  ...   \n",
       "B.J. Armstrong                                     0.373  ...   \n",
       "Khalid Reeves                                      0.316  ...   \n",
       "Dedric Willoughby                                  0.300  ...   \n",
       "\n",
       "                     player_efficiency_rating  three_point_percentage  \\\n",
       "name                                                                    \n",
       "J.J. Barea                               14.5                   0.352   \n",
       "Ryan Broekhoff                           11.4                   0.403   \n",
       "Jalen Brunson                            14.5                   0.364   \n",
       "Trey Burke                               14.0                   0.347   \n",
       "Willie Cauley-Stein                      16.8                   0.185   \n",
       "...                                       ...                     ...   \n",
       "Eric Murdock                             17.4                   0.343   \n",
       "Chris Anstey                             13.2                   0.138   \n",
       "B.J. Armstrong                           14.5                   0.425   \n",
       "Khalid Reeves                            13.1                   0.363   \n",
       "Dedric Willoughby                        12.2                   0.296   \n",
       "\n",
       "                     total_rebound_percentage  true_shooting_percentage  \\\n",
       "name                                                                      \n",
       "J.J. Barea                                6.0                     0.515   \n",
       "Ryan Broekhoff                            8.9                     0.604   \n",
       "Jalen Brunson                             6.6                     0.573   \n",
       "Trey Burke                                4.9                     0.502   \n",
       "Willie Cauley-Stein                      14.5                     0.563   \n",
       "...                                       ...                       ...   \n",
       "Eric Murdock                              6.2                     0.523   \n",
       "Chris Anstey                             14.2                     0.477   \n",
       "B.J. Armstrong                            4.3                     0.555   \n",
       "Khalid Reeves                             5.7                     0.528   \n",
       "Dedric Willoughby                         5.9                     0.472   \n",
       "\n",
       "                     turnover_percentage  two_point_percentage  \\\n",
       "name                                                             \n",
       "J.J. Barea                          14.9                 0.462   \n",
       "Ryan Broekhoff                      10.1                 0.512   \n",
       "Jalen Brunson                       12.7                 0.542   \n",
       "Trey Burke                          10.5                 0.449   \n",
       "Willie Cauley-Stein                 10.3                 0.546   \n",
       "...                                  ...                   ...   \n",
       "Eric Murdock                        16.8                 0.462   \n",
       "Chris Anstey                        14.7                 0.424   \n",
       "B.J. Armstrong                      11.9                 0.487   \n",
       "Khalid Reeves                       17.9                 0.446   \n",
       "Dedric Willoughby                   15.5                 0.395   \n",
       "\n",
       "                     usage_percentage  win_shares  win_shares_per_48_minutes  \\\n",
       "name                                                                           \n",
       "J.J. Barea                       23.4        23.8                      0.070   \n",
       "Ryan Broekhoff                   14.8         1.2                      0.093   \n",
       "Jalen Brunson                    19.7         7.5                      0.099   \n",
       "Trey Burke                       23.0        12.7                      0.063   \n",
       "Willie Cauley-Stein              17.4        22.2                      0.121   \n",
       "...                               ...         ...                        ...   \n",
       "Eric Murdock                     21.9        25.6                      0.103   \n",
       "Chris Anstey                     21.2         2.8                      0.062   \n",
       "B.J. Armstrong                   18.4        45.0                      0.121   \n",
       "Khalid Reeves                    19.1         8.4                      0.069   \n",
       "Dedric Willoughby                21.5         0.4                      0.040   \n",
       "\n",
       "                     years_played  \n",
       "name                               \n",
       "J.J. Barea                   14.0  \n",
       "Ryan Broekhoff                2.0  \n",
       "Jalen Brunson                 3.0  \n",
       "Trey Burke                    8.0  \n",
       "Willie Cauley-Stein           6.0  \n",
       "...                           ...  \n",
       "Eric Murdock                 10.0  \n",
       "Chris Anstey                  3.0  \n",
       "B.J. Armstrong               11.0  \n",
       "Khalid Reeves                 6.0  \n",
       "Dedric Willoughby             1.0  \n",
       "\n",
       "[1923 rows x 27 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_avgs.astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>assist_percentage</th>\n",
       "      <th>avg_salary</th>\n",
       "      <th>block_percentage</th>\n",
       "      <th>box_plus_minus</th>\n",
       "      <th>defensive_box_plus_minus</th>\n",
       "      <th>defensive_rebound_percentage</th>\n",
       "      <th>effective_field_goal_percentage</th>\n",
       "      <th>field_goal_percentage</th>\n",
       "      <th>field_goal_perc_sixteen_foot_plus_two_pointers</th>\n",
       "      <th>field_goal_perc_ten_to_sixteen_feet</th>\n",
       "      <th>...</th>\n",
       "      <th>player_efficiency_rating</th>\n",
       "      <th>three_point_percentage</th>\n",
       "      <th>total_rebound_percentage</th>\n",
       "      <th>true_shooting_percentage</th>\n",
       "      <th>turnover_percentage</th>\n",
       "      <th>two_point_percentage</th>\n",
       "      <th>usage_percentage</th>\n",
       "      <th>win_shares</th>\n",
       "      <th>win_shares_per_48_minutes</th>\n",
       "      <th>years_played</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LeBron James</th>\n",
       "      <td>36.6</td>\n",
       "      <td>1.722842e+07</td>\n",
       "      <td>1.6</td>\n",
       "      <td>8.9</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18.6</td>\n",
       "      <td>0.543</td>\n",
       "      <td>0.504</td>\n",
       "      <td>0.385</td>\n",
       "      <td>0.3680</td>\n",
       "      <td>...</td>\n",
       "      <td>27.4</td>\n",
       "      <td>0.34500</td>\n",
       "      <td>11.3</td>\n",
       "      <td>0.5870</td>\n",
       "      <td>13.20</td>\n",
       "      <td>0.550</td>\n",
       "      <td>31.5</td>\n",
       "      <td>242.1</td>\n",
       "      <td>0.233</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kobe Bryant</th>\n",
       "      <td>24.2</td>\n",
       "      <td>1.641190e+07</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>12.7</td>\n",
       "      <td>0.482</td>\n",
       "      <td>0.447</td>\n",
       "      <td>0.402</td>\n",
       "      <td>0.4300</td>\n",
       "      <td>...</td>\n",
       "      <td>22.9</td>\n",
       "      <td>0.32900</td>\n",
       "      <td>8.1</td>\n",
       "      <td>0.5500</td>\n",
       "      <td>11.60</td>\n",
       "      <td>0.479</td>\n",
       "      <td>31.8</td>\n",
       "      <td>172.7</td>\n",
       "      <td>0.170</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kevin Durant</th>\n",
       "      <td>19.6</td>\n",
       "      <td>1.624343e+07</td>\n",
       "      <td>2.3</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>18.5</td>\n",
       "      <td>0.543</td>\n",
       "      <td>0.493</td>\n",
       "      <td>0.440</td>\n",
       "      <td>0.4590</td>\n",
       "      <td>...</td>\n",
       "      <td>25.2</td>\n",
       "      <td>0.38200</td>\n",
       "      <td>10.8</td>\n",
       "      <td>0.6140</td>\n",
       "      <td>12.40</td>\n",
       "      <td>0.533</td>\n",
       "      <td>30.2</td>\n",
       "      <td>144.4</td>\n",
       "      <td>0.217</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chris Paul</th>\n",
       "      <td>45.3</td>\n",
       "      <td>1.619682e+07</td>\n",
       "      <td>0.3</td>\n",
       "      <td>7.4</td>\n",
       "      <td>2.2</td>\n",
       "      <td>12.8</td>\n",
       "      <td>0.520</td>\n",
       "      <td>0.471</td>\n",
       "      <td>0.466</td>\n",
       "      <td>0.4800</td>\n",
       "      <td>...</td>\n",
       "      <td>24.9</td>\n",
       "      <td>0.36900</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.5820</td>\n",
       "      <td>13.30</td>\n",
       "      <td>0.508</td>\n",
       "      <td>23.9</td>\n",
       "      <td>185.8</td>\n",
       "      <td>0.241</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Blake Griffin</th>\n",
       "      <td>22.2</td>\n",
       "      <td>1.604293e+07</td>\n",
       "      <td>1.2</td>\n",
       "      <td>3.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>21.6</td>\n",
       "      <td>0.517</td>\n",
       "      <td>0.496</td>\n",
       "      <td>0.376</td>\n",
       "      <td>0.3170</td>\n",
       "      <td>...</td>\n",
       "      <td>21.6</td>\n",
       "      <td>0.33200</td>\n",
       "      <td>14.3</td>\n",
       "      <td>0.5600</td>\n",
       "      <td>11.80</td>\n",
       "      <td>0.520</td>\n",
       "      <td>27.8</td>\n",
       "      <td>75.9</td>\n",
       "      <td>0.163</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Marcus Williams</th>\n",
       "      <td>13.6</td>\n",
       "      <td>6.445000e+03</td>\n",
       "      <td>1.9</td>\n",
       "      <td>-5.4</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>23.8</td>\n",
       "      <td>0.318</td>\n",
       "      <td>0.318</td>\n",
       "      <td>0.300</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>...</td>\n",
       "      <td>10.4</td>\n",
       "      <td>0.32175</td>\n",
       "      <td>17.8</td>\n",
       "      <td>0.3180</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.318</td>\n",
       "      <td>26.2</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>-0.084</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Aaron Jackson</th>\n",
       "      <td>4.0</td>\n",
       "      <td>4.608000e+03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-8.9</td>\n",
       "      <td>-2.3</td>\n",
       "      <td>3.2</td>\n",
       "      <td>0.389</td>\n",
       "      <td>0.333</td>\n",
       "      <td>0.361</td>\n",
       "      <td>0.3955</td>\n",
       "      <td>...</td>\n",
       "      <td>2.4</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0.4050</td>\n",
       "      <td>9.20</td>\n",
       "      <td>0.400</td>\n",
       "      <td>13.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.017</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kirk Penney</th>\n",
       "      <td>10.4</td>\n",
       "      <td>4.475000e+03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-15.1</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>0.278</td>\n",
       "      <td>0.222</td>\n",
       "      <td>0.200</td>\n",
       "      <td>0.3880</td>\n",
       "      <td>...</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>3.9</td>\n",
       "      <td>0.2780</td>\n",
       "      <td>35.70</td>\n",
       "      <td>0.200</td>\n",
       "      <td>21.8</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>-0.306</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>John Holland</th>\n",
       "      <td>3.9</td>\n",
       "      <td>3.088667e+03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.5</td>\n",
       "      <td>-1.9</td>\n",
       "      <td>11.4</td>\n",
       "      <td>0.381</td>\n",
       "      <td>0.288</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.2000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.9</td>\n",
       "      <td>0.30600</td>\n",
       "      <td>7.7</td>\n",
       "      <td>0.4170</td>\n",
       "      <td>11.00</td>\n",
       "      <td>0.261</td>\n",
       "      <td>18.4</td>\n",
       "      <td>-0.2</td>\n",
       "      <td>-0.050</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andy Panko</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2.500000e+03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-6.2</td>\n",
       "      <td>-2.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.470</td>\n",
       "      <td>0.456</td>\n",
       "      <td>0.480</td>\n",
       "      <td>0.3950</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.24900</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5065</td>\n",
       "      <td>13.25</td>\n",
       "      <td>0.473</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.017</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1923 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 assist_percentage    avg_salary  block_percentage  \\\n",
       "name                                                                 \n",
       "LeBron James                  36.6  1.722842e+07               1.6   \n",
       "Kobe Bryant                   24.2  1.641190e+07               1.0   \n",
       "Kevin Durant                  19.6  1.624343e+07               2.3   \n",
       "Chris Paul                    45.3  1.619682e+07               0.3   \n",
       "Blake Griffin                 22.2  1.604293e+07               1.2   \n",
       "...                            ...           ...               ...   \n",
       "Marcus Williams               13.6  6.445000e+03               1.9   \n",
       "Aaron Jackson                  4.0  4.608000e+03               0.0   \n",
       "Kirk Penney                   10.4  4.475000e+03               0.0   \n",
       "John Holland                   3.9  3.088667e+03               1.0   \n",
       "Andy Panko                     0.0  2.500000e+03               0.0   \n",
       "\n",
       "                 box_plus_minus  defensive_box_plus_minus  \\\n",
       "name                                                        \n",
       "LeBron James                8.9                       1.8   \n",
       "Kobe Bryant                 4.6                      -0.1   \n",
       "Kevin Durant                6.7                       0.7   \n",
       "Chris Paul                  7.4                       2.2   \n",
       "Blake Griffin               3.6                       0.2   \n",
       "...                         ...                       ...   \n",
       "Marcus Williams            -5.4                      -2.0   \n",
       "Aaron Jackson              -8.9                      -2.3   \n",
       "Kirk Penney               -15.1                      -4.0   \n",
       "John Holland               -5.5                      -1.9   \n",
       "Andy Panko                 -6.2                      -2.9   \n",
       "\n",
       "                 defensive_rebound_percentage  \\\n",
       "name                                            \n",
       "LeBron James                             18.6   \n",
       "Kobe Bryant                              12.7   \n",
       "Kevin Durant                             18.5   \n",
       "Chris Paul                               12.8   \n",
       "Blake Griffin                            21.6   \n",
       "...                                       ...   \n",
       "Marcus Williams                          23.8   \n",
       "Aaron Jackson                             3.2   \n",
       "Kirk Penney                               7.8   \n",
       "John Holland                             11.4   \n",
       "Andy Panko                                0.0   \n",
       "\n",
       "                 effective_field_goal_percentage  field_goal_percentage  \\\n",
       "name                                                                      \n",
       "LeBron James                               0.543                  0.504   \n",
       "Kobe Bryant                                0.482                  0.447   \n",
       "Kevin Durant                               0.543                  0.493   \n",
       "Chris Paul                                 0.520                  0.471   \n",
       "Blake Griffin                              0.517                  0.496   \n",
       "...                                          ...                    ...   \n",
       "Marcus Williams                            0.318                  0.318   \n",
       "Aaron Jackson                              0.389                  0.333   \n",
       "Kirk Penney                                0.278                  0.222   \n",
       "John Holland                               0.381                  0.288   \n",
       "Andy Panko                                 0.470                  0.456   \n",
       "\n",
       "                 field_goal_perc_sixteen_foot_plus_two_pointers  \\\n",
       "name                                                              \n",
       "LeBron James                                              0.385   \n",
       "Kobe Bryant                                               0.402   \n",
       "Kevin Durant                                              0.440   \n",
       "Chris Paul                                                0.466   \n",
       "Blake Griffin                                             0.376   \n",
       "...                                                         ...   \n",
       "Marcus Williams                                           0.300   \n",
       "Aaron Jackson                                             0.361   \n",
       "Kirk Penney                                               0.200   \n",
       "John Holland                                              0.000   \n",
       "Andy Panko                                                0.480   \n",
       "\n",
       "                 field_goal_perc_ten_to_sixteen_feet  ...  \\\n",
       "name                                                  ...   \n",
       "LeBron James                                  0.3680  ...   \n",
       "Kobe Bryant                                   0.4300  ...   \n",
       "Kevin Durant                                  0.4590  ...   \n",
       "Chris Paul                                    0.4800  ...   \n",
       "Blake Griffin                                 0.3170  ...   \n",
       "...                                              ...  ...   \n",
       "Marcus Williams                               0.6000  ...   \n",
       "Aaron Jackson                                 0.3955  ...   \n",
       "Kirk Penney                                   0.3880  ...   \n",
       "John Holland                                  0.2000  ...   \n",
       "Andy Panko                                    0.3950  ...   \n",
       "\n",
       "                 player_efficiency_rating  three_point_percentage  \\\n",
       "name                                                                \n",
       "LeBron James                         27.4                 0.34500   \n",
       "Kobe Bryant                          22.9                 0.32900   \n",
       "Kevin Durant                         25.2                 0.38200   \n",
       "Chris Paul                           24.9                 0.36900   \n",
       "Blake Griffin                        21.6                 0.33200   \n",
       "...                                   ...                     ...   \n",
       "Marcus Williams                      10.4                 0.32175   \n",
       "Aaron Jackson                         2.4                 0.25000   \n",
       "Kirk Penney                          -6.0                 0.25000   \n",
       "John Holland                          5.9                 0.30600   \n",
       "Andy Panko                            0.0                 0.24900   \n",
       "\n",
       "                 total_rebound_percentage  true_shooting_percentage  \\\n",
       "name                                                                  \n",
       "LeBron James                         11.3                    0.5870   \n",
       "Kobe Bryant                           8.1                    0.5500   \n",
       "Kevin Durant                         10.8                    0.6140   \n",
       "Chris Paul                            7.5                    0.5820   \n",
       "Blake Griffin                        14.3                    0.5600   \n",
       "...                                   ...                       ...   \n",
       "Marcus Williams                      17.8                    0.3180   \n",
       "Aaron Jackson                         4.8                    0.4050   \n",
       "Kirk Penney                           3.9                    0.2780   \n",
       "John Holland                          7.7                    0.4170   \n",
       "Andy Panko                            0.0                    0.5065   \n",
       "\n",
       "                 turnover_percentage  two_point_percentage  usage_percentage  \\\n",
       "name                                                                           \n",
       "LeBron James                   13.20                 0.550              31.5   \n",
       "Kobe Bryant                    11.60                 0.479              31.8   \n",
       "Kevin Durant                   12.40                 0.533              30.2   \n",
       "Chris Paul                     13.30                 0.508              23.9   \n",
       "Blake Griffin                  11.80                 0.520              27.8   \n",
       "...                              ...                   ...               ...   \n",
       "Marcus Williams                 0.00                 0.318              26.2   \n",
       "Aaron Jackson                   9.20                 0.400              13.7   \n",
       "Kirk Penney                    35.70                 0.200              21.8   \n",
       "John Holland                   11.00                 0.261              18.4   \n",
       "Andy Panko                     13.25                 0.473               0.0   \n",
       "\n",
       "                 win_shares  win_shares_per_48_minutes  years_played  \n",
       "name                                                                  \n",
       "LeBron James          242.1                      0.233            18  \n",
       "Kobe Bryant           172.7                      0.170            20  \n",
       "Kevin Durant          144.4                      0.217            14  \n",
       "Chris Paul            185.8                      0.241            16  \n",
       "Blake Griffin          75.9                      0.163            12  \n",
       "...                     ...                        ...           ...  \n",
       "Marcus Williams        -0.1                     -0.084             2  \n",
       "Aaron Jackson           0.0                     -0.017             1  \n",
       "Kirk Penney            -0.2                     -0.306             2  \n",
       "John Holland           -0.2                     -0.050             3  \n",
       "Andy Panko              0.0                     -0.017             2  \n",
       "\n",
       "[1923 rows x 27 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_avgs.sort_values(by=['avg_salary'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "range(2, 16)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "range(2,16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling Section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_best_cluster_amount(x, comps, loops):\n",
    "    d = {}\n",
    "    for i in range(loops):\n",
    "        # Fits data to a new array using PCA given the number of components passed through comp parameter\n",
    "        after_pca = PCA(n_components=comps,whiten=True).fit_transform(x)\n",
    "        \n",
    "        k_range = range(2,16) # Range of amount of clusters I might expect to see\n",
    "        \n",
    "        # Doing KMeans clustering on the range chosen in k_range\n",
    "        k_means_var = [KMeans(n_clusters=k).fit(after_pca) for k in k_range]\n",
    "        \n",
    "        # Capturing labels for KMeans_var\n",
    "        labels = [i.labels_ for i in k_means_var]\n",
    "        \n",
    "        # Calculating silhouette score at each label\n",
    "        sil_score = [silhouette_score(after_pca, i, metric='euclidean') for i in labels]\n",
    "        \n",
    "        # Generates list of points where center of clusters are\n",
    "        centroids = [i.cluster_centers_ for i in k_means_var]\n",
    "        \n",
    "        # Calculates distance between newly generated data and the centroids found in KMeans\n",
    "        k_euclid = [cdist(after_pca,cent,'euclidean') for cent in centroids]\n",
    "        \n",
    "        dist = [np.min(ke, axis=1) for ke in k_euclid]\n",
    "        wcss = [sum(d**2) for d in dist]\n",
    "        tss = sum(pdist(after_pca)**2/after_pca.shape[0])\n",
    "        bss = tss - wcss\n",
    "        \n",
    "        sil_arr = np.transpose(sil_score)*100\n",
    "        max_score = np.max(sil_arr)\n",
    "        max_score_index = np.argmax(sil_arr == max_score)\n",
    "        \n",
    "        if max_score_index in d:\n",
    "            d[max_score_index] += 1\n",
    "        else:\n",
    "            d[max_score_index] = 1\n",
    "    \n",
    "    return d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_data(X):\n",
    "    plt.plot(X[:, 0], X[:, 1], 'k.', markersize=2)\n",
    "\n",
    "def plot_centroids(centroids, weights=None, circle_color='w', cross_color='k'):\n",
    "    if weights is not None:\n",
    "        centroids = centroids[weights > weights.max() / 10]\n",
    "    plt.scatter(centroids[:, 0], centroids[:, 1],\n",
    "                marker='o', s=35, linewidths=8,\n",
    "                color=circle_color, zorder=10, alpha=0.9)\n",
    "    plt.scatter(centroids[:, 0], centroids[:, 1],\n",
    "                marker='x', s=2, linewidths=12,\n",
    "                color=cross_color, zorder=11, alpha=1)\n",
    "\n",
    "def plot_decision_boundaries(clusterer, X, resolution=1000, show_centroids=True,\n",
    "                             show_xlabels=True, show_ylabels=True):\n",
    "    mins = X.min(axis=0) - 0.1\n",
    "    maxs = X.max(axis=0) + 0.1\n",
    "    xx, yy = np.meshgrid(np.linspace(mins[0], maxs[0], resolution),\n",
    "                         np.linspace(mins[1], maxs[1], resolution))\n",
    "    Z = clusterer.predict(np.c_[xx.ravel(), yy.ravel()])\n",
    "    Z = Z.reshape(xx.shape)\n",
    "\n",
    "    plt.contourf(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n",
    "                cmap=\"Pastel2\")\n",
    "    plt.contour(Z, extent=(mins[0], maxs[0], mins[1], maxs[1]),\n",
    "                linewidths=1, colors='k')\n",
    "    plot_data(X)\n",
    "    if show_centroids:\n",
    "        plot_centroids(clusterer.cluster_centers_)\n",
    "\n",
    "    if show_xlabels:\n",
    "        plt.xlabel(\"$x_1$\", fontsize=14)\n",
    "    else:\n",
    "        plt.tick_params(labelbottom=False)\n",
    "    if show_ylabels:\n",
    "        plt.ylabel(\"$x_2$\", fontsize=14, rotation=0)\n",
    "    else:\n",
    "        plt.tick_params(labelleft=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Silhouette Graphing:\n",
    "\n",
    "\"\"\" \n",
    "    X = x\n",
    "    range_n_clusters = range(2,10)\n",
    " \"\"\"\n",
    "\n",
    "def silhouette_graph(X, range_n_clusters):\n",
    "    # taken from sklearn\n",
    "    for n_clusters in range_n_clusters:\n",
    "        # Create a subplot with 1 row and 2 columns\n",
    "        fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "        fig.set_size_inches(18, 7)\n",
    "\n",
    "        # The 1st subplot is the silhouette plot\n",
    "        # The silhouette coefficient can range from -1, 1 but in this example all\n",
    "        # lie within [-0.1, 1]\n",
    "        ax1.set_xlim([-0.1, 1])\n",
    "        # The (n_clusters+1)*10 is for inserting blank space between silhouette\n",
    "        # plots of individual clusters, to demarcate them clearly.\n",
    "        ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n",
    "\n",
    "        # Initialize the clusterer with n_clusters value and a random generator\n",
    "        # seed of 10 for reproducibility.\n",
    "        clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n",
    "        cluster_labels = clusterer.fit_predict(X)\n",
    "\n",
    "        # The silhouette_score gives the average value for all the samples.\n",
    "        # This gives a perspective into the density and separation of the formed\n",
    "        # clusters\n",
    "        silhouette_avg = silhouette_score(X, cluster_labels)\n",
    "        print(\"For n_clusters =\", n_clusters,\n",
    "            \"The average silhouette_score is :\", silhouette_avg)\n",
    "\n",
    "        # Compute the silhouette scores for each sample\n",
    "        sample_silhouette_values = silhouette_samples(X, cluster_labels)\n",
    "\n",
    "        y_lower = 10\n",
    "        for i in range(n_clusters):\n",
    "            # Aggregate the silhouette scores for samples belonging to\n",
    "            # cluster i, and sort them\n",
    "            ith_cluster_silhouette_values = \\\n",
    "                sample_silhouette_values[cluster_labels == i]\n",
    "\n",
    "            ith_cluster_silhouette_values.sort()\n",
    "\n",
    "            size_cluster_i = ith_cluster_silhouette_values.shape[0]\n",
    "            y_upper = y_lower + size_cluster_i\n",
    "            \n",
    "            cmap = cm.get_cmap('Spectral')\n",
    "            color = cmap(float(i) / n_clusters)\n",
    "            ax1.fill_betweenx(np.arange(y_lower, y_upper),\n",
    "                            0, ith_cluster_silhouette_values,\n",
    "                            facecolor=color, edgecolor=color, alpha=0.7)\n",
    "\n",
    "            # Label the silhouette plots with their cluster numbers at the middle\n",
    "            ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n",
    "\n",
    "            # Compute the new y_lower for next plot\n",
    "            y_lower = y_upper + 10  # 10 for the 0 samples\n",
    "\n",
    "        ax1.set_title(\"The silhouette plot for the various clusters.\")\n",
    "        ax1.set_xlabel(\"The silhouette coefficient values\")\n",
    "        ax1.set_ylabel(\"Cluster label\")\n",
    "\n",
    "        # The vertical line for average silhoutte score of all the values\n",
    "        ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n",
    "\n",
    "        ax1.set_yticks([])  # Clear the yaxis labels / ticks\n",
    "        ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n",
    "\n",
    "        # 2nd Plot showing the actual clusters formed\n",
    "\n",
    "        colors = cmap(cluster_labels.astype(float) / n_clusters)\n",
    "        ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n",
    "                    c=colors)\n",
    "\n",
    "        # Labeling the clusters\n",
    "        centers = clusterer.cluster_centers_\n",
    "        # Draw white circles at cluster centers\n",
    "        ax2.scatter(centers[:, 0], centers[:, 1],\n",
    "                    marker='o', c=\"white\", alpha=1, s=200)\n",
    "\n",
    "        for i, c in enumerate(centers):\n",
    "            ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50)\n",
    "\n",
    "        ax2.set_title(\"The visualization of the clustered data.\")\n",
    "        ax2.set_xlabel(\"Feature space for the 1st feature\")\n",
    "        ax2.set_ylabel(\"Feature space for the 2nd feature\")\n",
    "\n",
    "        plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n",
    "                    \"with n_clusters = %d\" % n_clusters),\n",
    "                    fontsize=14, fontweight='bold')\n",
    "\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1923 entries, J.J. Barea to Dedric Willoughby\n",
      "Data columns (total 27 columns):\n",
      " #   Column                                          Non-Null Count  Dtype  \n",
      "---  ------                                          --------------  -----  \n",
      " 0   assist_percentage                               1923 non-null   float64\n",
      " 1   avg_salary                                      1923 non-null   float64\n",
      " 2   block_percentage                                1923 non-null   float64\n",
      " 3   box_plus_minus                                  1923 non-null   float64\n",
      " 4   defensive_box_plus_minus                        1923 non-null   float64\n",
      " 5   defensive_rebound_percentage                    1923 non-null   float64\n",
      " 6   effective_field_goal_percentage                 1923 non-null   float64\n",
      " 7   field_goal_percentage                           1923 non-null   float64\n",
      " 8   field_goal_perc_sixteen_foot_plus_two_pointers  1923 non-null   float64\n",
      " 9   field_goal_perc_ten_to_sixteen_feet             1923 non-null   float64\n",
      " 10  field_goal_perc_three_to_ten_feet               1923 non-null   float64\n",
      " 11  field_goal_perc_zero_to_three_feet              1923 non-null   float64\n",
      " 12  field_goal_percentage                           1923 non-null   float64\n",
      " 13  free_throw_attempt_rate                         1923 non-null   float64\n",
      " 14  free_throw_percentage                           1923 non-null   float64\n",
      " 15  offensive_box_plus_minus                        1923 non-null   float64\n",
      " 16  offensive_rebound_percentage                    1923 non-null   float64\n",
      " 17  player_efficiency_rating                        1923 non-null   float64\n",
      " 18  three_point_percentage                          1923 non-null   float64\n",
      " 19  total_rebound_percentage                        1923 non-null   float64\n",
      " 20  true_shooting_percentage                        1923 non-null   float64\n",
      " 21  turnover_percentage                             1923 non-null   float64\n",
      " 22  two_point_percentage                            1923 non-null   float64\n",
      " 23  usage_percentage                                1923 non-null   float64\n",
      " 24  win_shares                                      1923 non-null   float64\n",
      " 25  win_shares_per_48_minutes                       1923 non-null   float64\n",
      " 26  years_played                                    1923 non-null   int64  \n",
      "dtypes: float64(26), int64(1)\n",
      "memory usage: 500.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df_avgs.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalizing with MinMaxScalar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1923, 27)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df_avgs.values\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df_avgs.values\n",
    "min_max_scalar = MinMaxScaler()\n",
    "x_scaled = min_max_scalar.fit_transform(x)\n",
    "df_avgs_normalized = pd.DataFrame(x_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df_avgs_normalized.values\n",
    "x.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(16, 78.48, '98.48% can be explained at 16 components')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA(x.shape[1])\n",
    "pca.fit(x)\n",
    "var = pca.explained_variance_ratio_\n",
    "var1 = np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)\n",
    "var_to_beat = np.argwhere(var1 >= 98)\n",
    "var_explained = np.round(var1[var_to_beat[0]], decimals=2)[0]\n",
    "comps = var_to_beat.flatten()[1]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(16,10))\n",
    "\n",
    "ax.plot(var1)\n",
    "ax.set_title('Choosing PCA Components')\n",
    "ax.set_xlabel('Number of PCA Components')\n",
    "ax.set_ylabel('Cumulative Explained Variance (%)')\n",
    "ax.axvline(var_to_beat[0], c='r', linestyle='--')\n",
    "ax.annotate(f'{var_explained}% can be explained at {comps} components', xy=(comps, var_explained-20))\n",
    "\n",
    "#plt.savefig('images/pca_scree_minmax.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{6: 3, 1: 2, 10: 1, 12: 1, 0: 1, 4: 1, 5: 1}\n",
      "Number of Clusters in order from best to worst: dict_keys([6, 1, 10, 12, 0, 4, 5])\n"
     ]
    }
   ],
   "source": [
    "d_clusters = find_best_cluster_amount(x, comps, 10)\n",
    "d_clusters = dict(sorted(d_clusters.items(), key=lambda item: item[1], reverse=True))\n",
    "print(d_clusters)\n",
    "print(f'Number of Clusters in order from best to worst: {d_clusters.keys()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting Clusters\n",
    "fig, ax = plt.subplots(figsize=(16,10))\n",
    "\n",
    "ax.barh(list(d_clusters.keys()), list(d_clusters.values()))\n",
    "ax.set_title('Choosing Amount of Clusters')\n",
    "ax.set_xlabel('Times Cluster had Max Silhouette Score')\n",
    "ax.set_ylabel('Number of Clusters')\n",
    "ax.set_yticks(np.arange(16))\n",
    "\n",
    "fig = ax.figure\n",
    "fig.set_size_inches(16,10)\n",
    "fig.tight_layout(pad=1)\n",
    "#fig.savefig('images/number_of_clusters_minmax.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Normalizing with Standard Scalar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1923, 27)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df_avgs.values\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "km = KMeans(5)\n",
    "y = km.fit_predict(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.49955232,  0.08725952, -0.89205786, ...,  0.18065273,\n",
       "         0.1204122 ,  1.48156972],\n",
       "       [-0.54912246, -0.48190732, -0.30656782, ..., -0.57876183,\n",
       "         0.37458636, -0.9885338 ],\n",
       "       [ 1.31329754, -0.56563308, -0.83350885, ..., -0.36706662,\n",
       "         0.44089267, -0.78269184],\n",
       "       ...,\n",
       "       [ 1.04045895, -0.35858031, -0.83350885, ...,  0.89302391,\n",
       "         0.68401578,  0.86404384],\n",
       "       [ 1.44378557, -0.35410107, -0.71641084, ..., -0.33682445,\n",
       "         0.10936115, -0.16516596],\n",
       "       [ 1.47937321, -0.82063401, -0.77495985, ..., -0.60564376,\n",
       "        -0.21111932, -1.19437576]])"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df_avgs.values # df_total\n",
    "x_scaled = StandardScaler().fit_transform(x)\n",
    "df_avgs_normalized = pd.DataFrame(x_scaled)\n",
    "x = df_avgs_normalized.values\n",
    "x.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 0., 0., ..., 0., 1., 0.]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df_career.values # df_total\n",
    "x_scaled = OneHotEncoder().fit_transform(x).toarray()\n",
    "df_avgs_normalized = pd.DataFrame(x_scaled)\n",
    "x = df_avgs_normalized.values\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-48-1c34a0070e59>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mi1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mitertools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcombinations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m             \u001b[0mwcss\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mwcss\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "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GPMvD/39/WP+lSIgJSUl5PmSrngNADvQCQCc6AQATowOACZs2rRpysnJkdfrDTru9XqVl5cX8prc3Fy1tbXp4sWLQefPmjVLc+fONZoXgFl0AgAnOgGAE6MDgIh4PB7V19errq5Ox48fV1lZmXw+n0pKSiRJ5eXlKioqGj3/4YcfVlJSkkpLS3Xs2DHt379fL7/8skpLS3nZJHANoBMAONEJAAIYHQBEZNWqVdq2bZuqqqp0zz336PDhw2poaFBaWpokyefzqbu7e/T8GTNmaN++fTp9+rSWLl2q4uJiff/999q7d69aW1t/9nN98cUXuv/++3XTTTcpIyNDlZWVk/rrs2pra5Wdna3U1FQVFBT8bN7m5matWbNG6enpmjVrlhYvXqy33nprSmZ1OnHihGbPnq2bb77ZcMJgE83r9/u1Y8cOLVq0SCkpKUpPT9fzzz8/JbMePHhQ9913n2bPnq1bb71Va9as0VdffTUpWVtaWrR69WplZGRo5syZevvtt8e95mofZ1fTCcuWLZPH41F8fLz+8pe/hPX9jWUv2NQJkl29YFMnSPb0Ap1gnk29YFMnSHb1gi2dIE1uLzA6AIjY73//e33++efq6+vTxx9/rCVLloz+2c6dO/X5558HnZ+VlaVHH31UkvS3v/1Nra2tysvLk9vtVk9PT8jP8d133+mhhx5SSkqKDh06pIqKClVXV+u1114z94U5NDY2avPmzdq0aZOampqUm5v7s3mPHDmirKwsvfnmm2pra9OGDRv01FNPae/evVMua8DQ0JDWr1+vxYsXG8/oFEne5557Tn//+9/1/PPP68iRI2poaJiU3BPNevLkSa1du1b5+flqamrSe++9p4sXL8rtdhvPKknnz59XZmamKioqgn793JVE63EWSSd88MEH2rlzpy5cuKCtW7equbl53O9vLHvBpk6IJG9ALHrBpk6IJG8se4FOMMumXrCpEyS7esGmTpAmtxfiBgcHJ28CBPCLt3z5cmVlZenVV18dPbZgwQKtXLlSW7ZsGXN+4P9pfPnll6OFWFVVpd27d+vYsWPGX3I50byhFBcXa3h42Pi/YkSa9dlnn9W3336rJUuW6JlnntG///1vozkDJpq3q6tL+fn5amlpUXp6+qRkDJho1n/84x8qKSnRN998o4SEBElSU1OTioqKdOLECblcrknLfvPNN+uvf/2rfve7313xHNseZ7HMa1MnSHb1gk2dINnbC3RC7POGwnOF0GzqBVs7QTLfC7zSAcCkGRoaUkdHhwoLC4OOFxYWqr29PeQ1R44cUX5+ftACu3z5cp0+fVpff/31lMsbytmzZzVz5swopwsWadYDBw7owIEDqqysNJrvcpHkff/993XLLbfoo48+0vz583XHHXfo8ccf1zfffDPlsubk5Oi6665TXV2dhoeHdfbsWb3zzjtasGDBpD6JCJdtj7NY5bWpEyS7esGmTog0r029QCeYzRsKzxXGsqkXrvVOkK7uccboAGDSDAwMaHh4eMyvvkpOTh7za7IC+vr6Qp4f+DOTIsl7uQ8//FAff/yxiouLDST8SSRZfT6fnnzySdXU1OjGG280mu9ykeQ9efKkenp61NjYqB07dqimpkZdXV1avXq1RkZGplTWuXPnat++fdq2bZtSUlKUlpamY8eOac+ePcZyXg3bHmexymtTJ0h29YJNnRBpXpt6gU4In029YFMnSHb1wrXeCdLVPc4YHQBMustffuX3+3/2JVmhzg913JSJ5g04fPiwHn30UVVWVuquu+4yFS/IRLI+9thjWr9+vRYtWjQZ0UKaSN6RkRH98MMPqqmp0ZIlS7R48WLV1NTok08+0aeffjqlsvb29mrjxo1avXq1Dh06pH/961/61a9+peLiYuP/YyhStj3OYpnXpk6Q7OoFmzpBurZ7gU6YGJt6waZOkOzqhWu5E6TIH2eMDgAmjcvlUkJCwpg1tL+/f8xyGpCSkhLyfElXvCZaIskb0NbWJrfbrWeffVYbNmwwGVNSZFmbmppUWVkpl8sll8uljRs36vz583K5XHrjjTemXN7U1FQlJibq9ttvHz122223KTExUadOnZpSWV9//XVdf/312rp1q+bPn68lS5Zo165damlpmdDLbSeLbY+zWOW1qRMku3rBpk6INK9NvUAnhM+mXrCpEyLNy3MFc67mccboAGDSTJs2TTk5OfJ6vUHHvV6v8vLyQl6Tm5urtrY2Xbx4Mej8WbNmae7cuVMur/TjryByu9165plnVFpaajRjQCRZW1tb1dzcPPrfn//8ZyUlJam5uVkPPvjglMt7991369KlS0G/Yu3kyZO6dOmS5syZM6WyXrhwYfRNoQICH0/Ff72w7XEWq7w2dYJkVy/Y1AmR5rWpF+gEs3kl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\n",
      "text/plain": [
       "<Figure size 1152x648 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "maxk = 14\n",
    "wcss = np.zeros(maxk)\n",
    "silhouette = np.zeros(maxk)\n",
    "\n",
    "fig, axes = plt.subplots(3, 4, figsize=(16,9))\n",
    "\n",
    "# flatten\n",
    "axes = [ax for axrow in axes for ax in axrow]\n",
    "\n",
    "for k, ax in zip(range(2,maxk), axes):\n",
    "    km = KMeans(k)\n",
    "    y = km.fit_predict(x)\n",
    "    ax.axis('off')\n",
    "    ax.scatter(x[:,0], x[:,1], c=y, linewidths=0, s=10)\n",
    "    ax.set_ylim(ymin=-9, ymax=8)\n",
    "    \n",
    "    \n",
    "    for c in range(0, k):\n",
    "        for i1, i2 in itertools.combinations([ i for i in range(len(y)) if y[i] == c ], 2):\n",
    "            wcss[k] += sum(x[i1] - x[i2])**2\n",
    "    wcss[k] /= 2\n",
    "    \n",
    "    if k > 1:\n",
    "        silhouette[k] = silhouette_score(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(x.shape[1])\n",
    "pca.fit(x)\n",
    "var = pca.explained_variance_ratio_\n",
    "var1 = np.cumsum(np.round(pca.explained_variance_ratio_, decimals=4)*100)\n",
    "var_to_beat = np.argwhere(var1 >= 98)\n",
    "var_explained = np.round(var1[var_to_beat[0]], decimals=2)[0]\n",
    "comps = var_to_beat.flatten()[1]\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(16,10))\n",
    "\n",
    "ax.plot(var1)\n",
    "ax.set_title('Choosing PCA Components')\n",
    "ax.set_xlabel('Number of PCA Components')\n",
    "ax.set_ylabel('Cumulative Explained Variance (%)')\n",
    "ax.axvline(var_to_beat[0], c='r', linestyle='--')\n",
    "ax.annotate(f'{var_explained}% can be explained at {comps} components', xy=(comps, var_explained-20))\n",
    "\n",
    "#plt.savefig('images/pca_scree_standard.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding best cluster amounts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "d_clusters = find_best_cluster_amount(x, comps, 10)\n",
    "d_clusters = dict(sorted(d_clusters.items(), key=lambda item: item[1], reverse=True))\n",
    "print(d_clusters)\n",
    "print(f'Number of Clusters in order from best to worst: {d_clusters.keys()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plotting Clusters\n",
    "fig, ax = plt.subplots(figsize=(16,10))\n",
    "\n",
    "ax.barh(list(d_clusters.keys()), list(d_clusters.values()))\n",
    "ax.set_title('Choosing Amount of Clusters')\n",
    "ax.set_xlabel('Times Cluster had Max Silhouette Score')\n",
    "ax.set_ylabel('Number of Clusters')\n",
    "ax.set_yticks(np.arange(2,16))\n",
    "\n",
    "fig = ax.figure\n",
    "fig.set_size_inches(16,10)\n",
    "fig.tight_layout(pad=1)\n",
    "#fig.savefig('images/number_of_clusters_standard.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "silhouette_graph(x, range(2,16))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TSNE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Trying TSNE\n",
    "x_embedded = TSNE().fit_transform(x)\n",
    "x_embedded.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "(fig, subplots) = plt.subplots(5, figsize=(8, 15))\n",
    "n_components = 2\n",
    "perplexities = [5, 30, 50, 100]\n",
    "\n",
    "ax = subplots[0]\n",
    "ax.scatter(x[:, 0], x[:, 2])\n",
    "ax.xaxis.set_major_formatter(NullFormatter())\n",
    "ax.yaxis.set_major_formatter(NullFormatter())\n",
    "\n",
    "for i, perplexity in enumerate(perplexities):\n",
    "    ax = subplots[i + 1]\n",
    "\n",
    "    t0 = time()\n",
    "    tsne = TSNE(n_components=n_components, init='random',\n",
    "                         random_state=0, perplexity=perplexity)\n",
    "    Y = tsne.fit_transform(x)\n",
    "    t1 = time()\n",
    "    print(\"perplexity=%d in %.2g sec\" % (perplexity, t1 - t0))\n",
    "\n",
    "    ax.set_title(\"Perplexity=%d\" % perplexity)\n",
    "    ax.scatter(Y[:, 0], Y[:, 1])\n",
    "    ax.xaxis.set_major_formatter(NullFormatter())\n",
    "    ax.yaxis.set_major_formatter(NullFormatter())\n",
    "    ax.axis('tight')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
